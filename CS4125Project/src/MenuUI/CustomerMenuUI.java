/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MenuUI;

import Database.DBControler;
import Database.LocalizationDB;
import Database.PurchaseDB;
import Services.LocalizationLanguage;
import Services.BuyItemCommand;
import Services.Money;
import Services.Shop;
import Services.ShopControl;
import Stock.StockItem;
import ThirdParty.CreditCardCo;
import ThirdParty.Delivery.BasicDelivery;
import ThirdParty.Delivery.MoneySaver;
import ThirdParty.Delivery.Premium;
import ThirdParty.Delivery.Delivery;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;;
import javax.swing.JOptionPane;

/**
 *
 * @author Brian
 */
public class CustomerMenuUI extends javax.swing.JFrame {
    
    private static final Money.Currency DEFAULT_CURRENCY = Money.Currency.EUR;

    /**
     * Creates new form CustomerMenuUI
     */
    private final String username;
    private final LocalizationDB localizationDB;
    
    public CustomerMenuUI(String username) {
        initComponents();
        this.username = username;
        localizationDB = DBControler.getInstance().getLocalizationDB();
        refreshText();
        
        LocalizationLanguage[] langauges = localizationDB.getLanguages();
        for(int i = 0; i < langauges.length; i++){
            LanguageDropdown.addItem(langauges[i].getName());
        }
        
        ActionListener languageChanged = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                localizationDB.setLanguage(langauges[LanguageDropdown.getSelectedIndex()].getNum());
                refreshText();
            }
        };
        LanguageDropdown.addActionListener(languageChanged);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        logoutButton = new javax.swing.JButton();
        buyStockButton = new javax.swing.JButton();
        welcomeMessage = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        checkStockButton = new javax.swing.JButton();
        purchaseHistoryButton = new javax.swing.JButton();
        returnItemButton = new javax.swing.JToggleButton();
        basketButton = new javax.swing.JButton();
        paymentMethodButton = new javax.swing.JButton();
        LanguageDropdown = new javax.swing.JComboBox<>();
        Language = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        logoutButton.setText("Logout");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        buyStockButton.setText("Buy Stock");
        buyStockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyStockButtonActionPerformed(evt);
            }
        });

        welcomeMessage.setText("Welcome!");

        checkStockButton.setText("Check Stock");
        checkStockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkStockButtonActionPerformed(evt);
            }
        });

        purchaseHistoryButton.setText("Purchase History");
        purchaseHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseHistoryButtonActionPerformed(evt);
            }
        });

        returnItemButton.setText("Return Item");
        returnItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnItemButtonActionPerformed(evt);
            }
        });

        basketButton.setText("Basket");
        basketButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                basketButtonActionPerformed(evt);
            }
        });

        paymentMethodButton.setText("Payment method");
        paymentMethodButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentMethodButtonActionPerformed(evt);
            }
        });

        Language.setText("Language");
        Language.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(welcomeMessage)
                        .addGap(55, 55, 55))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(returnItemButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buyStockButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(basketButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(checkStockButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(purchaseHistoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Language)
                            .addComponent(LanguageDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(paymentMethodButton, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(logoutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(119, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Language)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(LanguageDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(welcomeMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(checkStockButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(basketButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buyStockButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(purchaseHistoryButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(returnItemButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(paymentMethodButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(logoutButton)))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshText(){
        welcomeMessage.setText(localizationDB.getLocalization("WELCOME_MESSAGE"));
        logoutButton.setText(localizationDB.getLocalization("LOGOUT"));
        buyStockButton.setText(localizationDB.getLocalization("BUY_STOCK"));
        checkStockButton.setText(localizationDB.getLocalization("CHECK_STOCK"));
        purchaseHistoryButton.setText(localizationDB.getLocalization("PURCHASE_HISTORY"));
        basketButton.setText(localizationDB.getLocalization("BASKET"));
        paymentMethodButton.setText(localizationDB.getLocalization("PAYMENT_METHOD"));
        returnItemButton.setText(localizationDB.getLocalization("RETURN_ITEM"));
        Language.setText(localizationDB.getLocalization("LANGUAGE"));
        repaint();
    }
    
    //Logout
    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        JOptionPane.showMessageDialog(null, localizationDB.getLocalization("LOG_OUT_MESSAGE"));
        this.setVisible(false);
        try {
            new MainMenuUI().run();
        } catch (IOException ex) {
            Logger.getLogger(CustomerMenuUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_logoutButtonActionPerformed

    //Buy stock
    private void buyStockButtonActionPerformed(java.awt.event.ActionEvent evt) {  
        Money.Currency currency = DEFAULT_CURRENCY;
        Shop s = Shop.getInstance();
        ArrayList<Map.Entry<String,Integer>> list = (ArrayList<Map.Entry<String,Integer>>) s.getSortedStock(Shop.SortOrder.NAME_ASC);
        
        String[] itemNames = new String[list.size()];
        for (int i = 0; i < list.size(); i++) {
            StockItem item = DBControler.getInstance().getStockItemDB().getStockItemByName(list.get(i).getKey());
            itemNames[i] = String.format("%s : %c%.2f", list.get(i).getKey(), currency.getSymbol(), item.getPrice() * currency.getFromEuroRate());
        }
        

        //Picking item
        String pickedItem;
        Object itemList = JOptionPane.showInputDialog(null, 
                                                    localizationDB.getLocalization("BASKET_MESSAGE"), 
                                                    localizationDB.getLocalization("BASKET_HEADING"), 
                                                    JOptionPane.QUESTION_MESSAGE, 
                                                    null,
                                                    itemNames, 
                                                    itemNames[0]);
        String[] selectionSplit = null;
        try {
            selectionSplit = itemList.toString().split(" ");
        }catch (Exception ex) {
            return;
        }
        pickedItem = selectionSplit[0]; 
        
        buyItemFromShop(pickedItem, currency);
    }                                        

    //Check Stock
    private void checkStockButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        Shop s = Shop.getInstance();
        ArrayList<Map.Entry<String,Integer>> list = (ArrayList<Map.Entry<String,Integer>>) s.getSortedStock(Shop.SortOrder.NAME_ASC);
        
        int i = 0;
        String[] itemNames = new String[list.size()];
        for(Map.Entry<String,Integer> entry : list){
            itemNames[i] = entry.getKey();
            i++;
        }
        
        //Picking item
        JComboBox cb = new JComboBox(itemNames);
        String pickedItem;
        Object itemList = JOptionPane.showInputDialog(null, 
                                                    localizationDB.getLocalization("CHECK_STOCK_MESSAGE"), 
                                                    localizationDB.getLocalization("CHECK_STOCK_HEADING"), 
                                                    JOptionPane.QUESTION_MESSAGE, 
                                                    null,
                                                    itemNames, 
                                                    itemNames[0]);
        
        if (itemList == null)
            return;
        
        pickedItem = itemList.toString();
        
        //Gets amount left for stock chosen
        int amountAvailable = 0;
        for(int j = 0; j < list.size(); j++){
            if(list.get(j).getKey().equals(pickedItem)){
               amountAvailable = list.get(j).getValue();
            }
        }
        
        //Show info on item
        StockItem stock = DBControler.getInstance().getStockItemDB().getStockItemByName(pickedItem);
        JOptionPane.showMessageDialog(null,
                                        String.format(localizationDB.getLocalization("ITEM_NAME") + "%s\n" +
                                                      localizationDB.getLocalization("ITEM_PRICE") + "%c%.2f\n" +
                                                      localizationDB.getLocalization("ITEM_DESCRIPTION") + "%d\n",
                                                       pickedItem, Money.Currency.EUR.getSymbol(),
                                                       stock.getPrice(), amountAvailable),
                                        String.format(localizationDB.getLocalization("ITEM_INFO_ON") + "%s", pickedItem),
                                        JOptionPane.WARNING_MESSAGE);
    }

    //View purchases
    private void purchaseHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseHistoryButtonActionPerformed
         new PurchaseHistoryUI(username).run();
    }//GEN-LAST:event_purchaseHistoryButtonActionPerformed
    
    //Buying items
    public void buyItemFromShop(String pickedItem, Money.Currency currency){
        Shop s = Shop.getInstance();
        ArrayList<Map.Entry<String,Integer>> list = (ArrayList<Map.Entry<String,Integer>>) s.getSortedStock(Shop.SortOrder.NAME_ASC);
        double price = 0;
        int amountWanted = 0;
        int amountAvailable = 0;
        boolean donePickingamount = false;
        for(int j = 0; j < list.size(); j++){
            if(list.get(j).getKey().equals(pickedItem)){
               amountAvailable = list.get(j).getValue();
            }
        }
        
        //Getting amount user wants
        while(!donePickingamount){
            Object howMuchWanted = JOptionPane.showInputDialog(null, 
                                                        localizationDB.getLocalization("BUYING_MSG1_PT1") + amountAvailable + " " + pickedItem + localizationDB.getLocalization("BUYING_MSG1_PT2"), 
                                                        localizationDB.getLocalization("STOCK"), 
                                                        JOptionPane.QUESTION_MESSAGE, 
                                                        null,
                                                        null, 
                                                        null);
            if (howMuchWanted == null)
                return;
            try {
            amountWanted = Integer.parseInt(howMuchWanted.toString());
            }catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Please enter a numberic value!", "Invalid Entry", JOptionPane.ERROR_MESSAGE);
                continue;
            }
            
            if (amountWanted < 0) {
                JOptionPane.showMessageDialog(null, "Error - Amount can not be negative!", "Invalid Entry", JOptionPane.ERROR_MESSAGE);
                continue;
            }
            if(amountWanted <= amountAvailable)
                donePickingamount = true;
            else
                JOptionPane.showMessageDialog(null,
                                            localizationDB.getLocalization("BUYING_MSG2") + amountAvailable + ".",
                                            localizationDB.getLocalization("BUYING_MSG3") + pickedItem + "'s",
                                            JOptionPane.WARNING_MESSAGE);
        }
        price += DBControler.getInstance().getStockItemDB().getStockItemByName(pickedItem).getPrice() * amountWanted;
        
        //Getting delevery type
        Delivery delivery = null;
        boolean validD = false;
        while(validD == false){
            String[] delvTypesStrings = {localizationDB.getLocalization("SLOW"), localizationDB.getLocalization("REGULAR"), localizationDB.getLocalization("PREMIUM")};
            Object delvTypes = JOptionPane.showInputDialog(null, 
                                                    localizationDB.getLocalization("BUYING_MSG4"), 
                                                    localizationDB.getLocalization("STOCK"), 
                                                    JOptionPane.QUESTION_MESSAGE, 
                                                    null,
                                                    delvTypesStrings, 
                                                    delvTypesStrings[2]);
            
            if (delvTypes == null)
                return;
            
            String pickedDelv = delvTypes.toString();

            if(pickedDelv == localizationDB.getLocalization("SLOW")){
                delivery = new MoneySaver(new BasicDelivery());
                validD = true;
            }
            else if(pickedDelv == localizationDB.getLocalization("REGULAR")){
                delivery = new BasicDelivery();
                validD = true;
            }
            else if(pickedDelv == localizationDB.getLocalization("PREMIUM")){
                delivery = new Premium(new BasicDelivery());
                validD = true;
            }
            price += delivery.getPrice();
        }
        
        CreditCardCo credit = new CreditCardCo();
        if(!pickedItem.equals("")){
            ShopControl controler = ShopControl.getInstance();
            controler.addCommand(new BuyItemCommand(DBControler.getInstance().getStockItemDB().getStockItemByName(pickedItem), amountWanted, s.getAccount().getUsername(), currency));
            controler.executeCommand(controler.numCommands-1);
        }
    }
    
    //Return Item
    private void returnItemButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               

        Shop shopInstance = Shop.getInstance();
        ArrayList<Map.Entry<String,Integer>> list = (ArrayList<Map.Entry<String,Integer>>) shopInstance.getSortedStock(Shop.SortOrder.NAME_ASC);
        
        String[] itemNames = new String[list.size()];
        for (int i = 0; i < list.size(); i++) {
            itemNames[i] = list.get(i).getKey();
        }
        
        //Picking item
        Object itemChoice = JOptionPane.showInputDialog(null, 
            localizationDB.getLocalization("RETURN_MSG1"), localizationDB.getLocalization("RETURN_STOCK"), 
            JOptionPane.QUESTION_MESSAGE, null, itemNames, itemNames[0]);
                
        boolean isValid = false;
        int amount = 0;
        String pickedItem = "";
        
        while(!isValid) {
            try {
            pickedItem = itemChoice.toString();
            } catch(Exception ex) {
               return; 
            }
            
            Object quantityChoice = JOptionPane.showInputDialog(null, 
            localizationDB.getLocalization("RETURN_MSG2"), localizationDB.getLocalization("RETURN_STOCK"), JOptionPane.QUESTION_MESSAGE, 
            null, null, null);
            
            if (quantityChoice == null)
                return;
            
            try {
            amount = Integer.parseInt(quantityChoice.toString());
            }
            catch(NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Error - Please enter a numeric value!", "Invalid entry", JOptionPane.ERROR_MESSAGE);
                    continue;
             }
            if (amount < 0) {
                JOptionPane.showMessageDialog(null, "Error - Numeric value must be postive!!", "Invalid entry", JOptionPane.ERROR_MESSAGE);
                continue;
            }
            isValid = true;
        }
        // Choose currency to refund in
        String validCurrencyNames[] = new String[Money.Currency.values().length];
        StringBuilder validCurrenciesStr = new StringBuilder();
        for (int i = 0; i < Money.Currency.values().length; i++) {
            validCurrencyNames[i] = Money.Currency.values()[i].name();
            validCurrenciesStr.append(validCurrencyNames[i]);
            if (i < Money.Currency.values().length - 1) {
                validCurrenciesStr.append(", ");
            }
        }
        
        boolean validChoice = false;
        String currencyChoiceStr;
        do
        {
            Object choice = JOptionPane.showInputDialog(null,
                    String.format(
                        "Which currency would you like to be refunded in? Options are: %s",
                         validCurrenciesStr
                    ),
                    "Currency", JOptionPane.QUESTION_MESSAGE, null, null, null);
            if (choice == null)
                return;
            currencyChoiceStr = String.valueOf(choice);
            
            // Check if choice is valid
            for (int i = 0; i < validCurrencyNames.length && !validChoice; i++) {
                if (currencyChoiceStr.equals(validCurrencyNames[i])) {
                    validChoice = true;
                }
            }
            
            if (!validChoice) {
                JOptionPane.showMessageDialog(null, 
                    String.format("%s is an invalid choice", currencyChoiceStr),
                    "Invalid Choice",
                    JOptionPane.WARNING_MESSAGE);
            }
        } while(!validChoice);
        Money.Currency currency = Money.Currency.valueOf(currencyChoiceStr);
        
        shopInstance.returnItem(DBControler.getInstance().getStockItemDB().getStockItemByName(pickedItem), amount, currency);
    }

    // checkout
    private void basketButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         
        new CheckoutUI().run();
    }
    /*
    private void basketButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_basketButtonActionPerformed

    }//GEN-LAST:event_basketButtonActionPerformed
*/
    private void paymentMethodButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentMethodButtonActionPerformed
      new PaymentSetupUI(Shop.getInstance().getAccount().getPaymentType()).run();
    }//GEN-LAST:event_paymentMethodButtonActionPerformed

    public void run() {
        this.setVisible(true);
    }
        

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Language;
    private javax.swing.JComboBox<String> LanguageDropdown;
    private javax.swing.JButton basketButton;
    private javax.swing.JButton buyStockButton;
    private javax.swing.JButton checkStockButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logoutButton;
    private javax.swing.JButton paymentMethodButton;
    private javax.swing.JButton purchaseHistoryButton;
    private javax.swing.JToggleButton returnItemButton;
    private javax.swing.JLabel welcomeMessage;
    // End of variables declaration//GEN-END:variables
}
