/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MenuUI;

import Database.DBControler;
import Database.PurchaseDB;
import Services.Purchase;
import Services.Shop;
import Stock.StockItem;
import ThirdParty.CreditCardCo;
import ThirdParty.Delivery.BasicDelivery;
import ThirdParty.Delivery.MoneySaver;
import ThirdParty.Delivery.Premium;
import ThirdParty.Delivery.Delivery;
import java.awt.BorderLayout;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Brian
 */
public class CustomerMenuUI extends javax.swing.JFrame {

    /**
     * Creates new form CustomerMenuUI
     */
    private String username;
    public CustomerMenuUI(String username) {
        initComponents();
        this.username = username;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Logout");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Buy Stock");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Welcome!");

        jButton3.setText("Check Stock");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Purchase History");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jToggleButton1.setText("Return Item");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(161, 161, 161)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(138, 138, 138)
                                .addComponent(jButton3)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(28, 28, 28)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jToggleButton1))
                            .addComponent(jButton4))))
                .addContainerGap(146, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jToggleButton1)
                .addGap(11, 11, 11)
                .addComponent(jButton1)
                .addContainerGap(93, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Logout
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JOptionPane.showMessageDialog(null, "See you next time!");
        this.setVisible(false);
        try {
            new MainMenuUI().run();
        } catch (IOException ex) {
            Logger.getLogger(CustomerMenuUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    //Buy stock
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Shop s = Shop.getInstance();
        NumberFormat formatter = new DecimalFormat("#0.00");
        ArrayList<Map.Entry<String,Integer>> list = (ArrayList<Map.Entry<String,Integer>>) s.getSortedStock(Shop.SortOrder.NAME_ASC);
        
        int i = 0;
        String[] itemNames = new String[list.size()];
        for(Map.Entry<String,Integer> entry : list){
            System.out.println("name = " + entry.getKey());
            itemNames[i] = entry.getKey() + " : €" + formatter.format(DBControler.getInstance().getStockItemDB().getStockItemByName(entry.getKey()).getPrice());
            i++;
        }
        
        //Picking item
        String pickedItem = "";
        Object itemList = JOptionPane.showInputDialog(null, 
                                                   "Pick item you would like to buy.", 
                                                   "Buy Stock", 
                                                    JOptionPane.QUESTION_MESSAGE, 
                                                    null,
                                                    itemNames, 
                                                    itemNames[0]);
        String[] selectionSplit = itemList.toString().split(" ");
        pickedItem = selectionSplit[0]; 
        
        buyItemFromShop(pickedItem);
    }//GEN-LAST:event_jButton2ActionPerformed

    //Check Stock
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Shop s = Shop.getInstance();
        ArrayList<Map.Entry<String,Integer>> list = (ArrayList<Map.Entry<String,Integer>>) s.getSortedStock(Shop.SortOrder.NAME_ASC);
        
        int i = 0;
        String[] itemNames = new String[list.size()];
        for(Map.Entry<String,Integer> entry : list){
            itemNames[i] = entry.getKey();
            i++;
        }
        
        //Picking item
        JComboBox cb = new JComboBox(itemNames);
        String pickedItem = "";
        Object itemList = JOptionPane.showInputDialog(null, 
                                                   "Pick item you would like to see information of.", 
                                                   "Check Stock", 
                                                    JOptionPane.QUESTION_MESSAGE, 
                                                    null,
                                                    itemNames, 
                                                    itemNames[0]);
        pickedItem = itemList.toString();
        //Show info on item
        StockItem stock = DBControler.getInstance().getStockItemDB().getStockItemByName(pickedItem);
        NumberFormat formatter = new DecimalFormat("#0.00");
        JOptionPane.showMessageDialog(null,
                                    "Item Name: " + pickedItem + "\n" +
                                            "Price: €" + formatter.format(stock.getPrice()) + "\n" +
                                            "Description: " + stock.getDescription() + "\n",
                                    "Info on " + pickedItem,
                                    JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_jButton3ActionPerformed

    //View purchases
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
         new PurchaseHistoryUI(username).run();
    }//GEN-LAST:event_jButton4ActionPerformed
    
    //Buying items
    public void buyItemFromShop(String pickedItem){
        Shop s = Shop.getInstance();
        ArrayList<Map.Entry<String,Integer>> list = (ArrayList<Map.Entry<String,Integer>>) s.getSortedStock(Shop.SortOrder.NAME_ASC);
        double price = 0;
        int amountWanted = 0;
        int amountAvailable = 0;
        boolean donePickingamount = false;
        for(int j = 0; j < list.size(); j++){
            if(list.get(j).getKey().equals(pickedItem)){
               amountAvailable = list.get(j).getValue();
            }
        }
        
        //Getting amount user wants
        while(!donePickingamount){
            Object howMuchWanted = JOptionPane.showInputDialog(null, 
                                                       "There are " + amountAvailable + " " + pickedItem + "'s left in stock. How many would you like?", 
                                                       "Stock", 
                                                        JOptionPane.QUESTION_MESSAGE, 
                                                        null,
                                                        null, 
                                                        null);
            amountWanted = Integer.parseInt(howMuchWanted.toString());
            if(amountWanted <= amountAvailable)
                donePickingamount = true;
            else
                JOptionPane.showMessageDialog(null,
                                            "You can not buy that much, you can get a maximum of " + amountAvailable + ".",
                                            "You cant have that much " + pickedItem + "'s",
                                            JOptionPane.WARNING_MESSAGE);
        }
        price += DBControler.getInstance().getStockItemDB().getStockItemByName(pickedItem).getPrice() * amountWanted;
        
        //Getting delevery type
        Delivery delivery = null;
        boolean validD = false;
        while(validD == false){
            String[] delvTypesStrings = {"Slow", "Regular", "Premium"};
            Object delvTypes = JOptionPane.showInputDialog(null, 
                                                   "What type of Delivery would you like?", 
                                                   "Stock", 
                                                    JOptionPane.QUESTION_MESSAGE, 
                                                    null,
                                                    delvTypesStrings, 
                                                    delvTypesStrings[2]);
            String pickedDelv = delvTypes.toString();

            switch (pickedDelv) {
                case "Slow":
                    delivery = new MoneySaver(new BasicDelivery());
                    validD = true;
                    break;
                case "Regular":
                    delivery = new BasicDelivery();
                    validD = true;
                    break;
                case "Premium":
                    delivery = new Premium(new BasicDelivery());
                    validD = true;
                    break;
                default:
                    break;
            }
            price += delivery.getPrice();
        }
        CreditCardCo credit = new CreditCardCo();
        NumberFormat formatter = new DecimalFormat("#0.00");
        if(!pickedItem.equals("")){
            s.makePurchase(DBControler.getInstance().getStockItemDB().getStockItemByName(pickedItem), amountWanted, s.getAccount().getUsername());
            credit.makePurchase(s.getAccount(), price);
            JOptionPane.showMessageDialog(null,
                                            "Thanks for buying " + amountWanted + " " + pickedItem + "'s.\n" +
                                                    "They will take " + delivery.getDays() + " day's to arrive!\n" +
                                                    "The total cost was €" + formatter.format(price) + ".",
                                            "Purchase Complete!!!",
                                            JOptionPane.PLAIN_MESSAGE);
        }
    }
    
    //Return Item
    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        Shop s = Shop.getInstance();
        ArrayList<Map.Entry<String,Integer>> list = (ArrayList<Map.Entry<String,Integer>>) s.getSortedStock(Shop.SortOrder.NAME_ASC);
        
        String[] itemNames = new String[list.size()];
        int i = 0;
        for(Map.Entry<String,Integer> entry : list){
            itemNames[i] = entry.getKey();
            i++;
        }
        
        //Picking item
        String pickedItem = "";
        int amount = 0;
        Object itemList = JOptionPane.showInputDialog(null, 
                                                   "Pick item you would like to return.", 
                                                   "Return Stock", 
                                                    JOptionPane.QUESTION_MESSAGE, 
                                                    null,
                                                    itemNames, 
                                                    itemNames[0]);
        pickedItem = itemList.toString();
        Object howMuch = JOptionPane.showInputDialog(null, 
                                                   "How many?", 
                                                   "Return Stock", 
                                                    JOptionPane.QUESTION_MESSAGE, 
                                                    null,
                                                    null, 
                                                    null);
        amount = Integer.parseInt(howMuch.toString());
        s.returnItem(DBControler.getInstance().getStockItemDB().getStockItemByName(pickedItem), amount);
        
        /*Shop s = Shop.getInstance();
        PurchaseDB db = DBControler.getInstance().getPurchaseDB();
        List<Purchase> purchases = db.getPurchases();
        List<Purchase> myPurchases = new ArrayList<Purchase>();
        for(int i = 0; i < purchases.size(); i++){
            if(username.equals(purchases.get(i).getUsername()))
                myPurchases.add(purchases.get(i));
        }
        Object rowData[] = new Object[myPurchases.size()];
        for (int i = 0; i < myPurchases.size();i++){
                rowData[i] = myPurchases.get(i).getItem().getName() + " " +
                            myPurchases.get(i).getQuantity() + " " +
                            myPurchases.get(i).getDiscount() + " " +
                            myPurchases.get(i).getDate().get(Calendar.DATE)+"/"+purchases.get(i).getDate().get(Calendar.MONTH)+"/"+purchases.get(i).getDate().get(Calendar.YEAR);
        }
        Object itemList = JOptionPane.showInputDialog(null, 
                                                   "Pick an order you would like return.", 
                                                   "Return", 
                                                    JOptionPane.QUESTION_MESSAGE, 
                                                    null,
                                                    rowData, 
                                                    rowData[0]);
        String toReturn = "";
        if(!itemList.toString().isEmpty()){
            toReturn = itemList.toString();
            String[] toReturnSplit = toReturn.split(" ");
            s.returnItem(DBControler.getInstance().getStockItemDB().getStockItemByName(toReturnSplit[0]), Integer.parseInt(toReturnSplit[1]));
        }*/
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    /**
     * 
     */

            public void run() {
                this.setVisible(true);
            }
        

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}
