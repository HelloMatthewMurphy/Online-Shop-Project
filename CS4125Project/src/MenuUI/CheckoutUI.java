/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MenuUI;

import Services.Money;
import Database.DBControler;
import Database.LocalizationDB;
import Services.Purchase;
import Services.PurchaseRequest;
import Services.PurchaseRequestDispatcher;
import Services.PurchaseRequestInterceptorChangeCurrency;
import Services.PurchaseRequestInterceptorLogging;
import Services.ShopControl;
import Services.ShoppingBasket;
import Services.Shop;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Matthew
 */
public final class CheckoutUI extends javax.swing.JFrame {

    private ArrayList<Purchase> purchases = new ArrayList<>();
    private final LocalizationDB localizationDB;
    private Money.Currency currency = Money.Currency.values()[0];
    
    private final PurchaseRequestDispatcher dispatcher;
    private PurchaseRequestInterceptorChangeCurrency currencyChangeInterceptor;
    
    /**
     * Creates new form CheckoutUI
     */
    public CheckoutUI() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        
        localizationDB = DBControler.getInstance().getLocalizationDB();
        CheckoutButton.setText(localizationDB.GetLocalization("CHECKOUT"));
        UndoButton.setText(localizationDB.GetLocalization("UNDO"));
        
        SetData();
        
        // Set up currency choice combo box
        for (Money.Currency currency : Money.Currency.values())
            cbCurrency.addItem(currency.name());
        
        // Set up the request dispatcher and interceptors
        dispatcher = new PurchaseRequestDispatcher();
        dispatcher.registerInterceptor(new PurchaseRequestInterceptorLogging("purchases.log"));
        currencyChangeInterceptor = null;
    }
    
    public void SetData(){
        DeleteData();
        purchases = ShoppingBasket.GetInstance().GetBasketContents();
        
        DefaultTableModel model = (DefaultTableModel) itemsInBasket.getModel();
        float total = 0;
        
        for (Purchase p : purchases) {
            Object rowData[] = new Object[3];
            rowData[0] = p.getItem().getName();
            rowData[1] = p.getQuantity();
            rowData[2] = String.format("€%.2f", p.getItem().getPrice());
            total += p.getItem().getPrice() * p.getQuantity();
            model.addRow(rowData);
        }
        // Set the text for the "Total Cost" label
        Money totalMoney = new Money(Money.Currency.EUR, total);
        totalMoney.changeCurrency(currency);
        totalCost.setText(localizationDB.GetLocalization("GET_TOTAL") + "€" + totalMoney);
        totalCost.repaint();
    }
    
    public void DeleteData(){
        DefaultTableModel model = (DefaultTableModel) itemsInBasket.getModel();
        
        for(int i = model.getRowCount()-1; i >= 0; i--){
            model.removeRow(i);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CheckoutButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemsInBasket = new javax.swing.JTable();
        totalCost = new javax.swing.JLabel();
        UndoButton = new javax.swing.JButton();
        cbCurrency = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        CheckoutButton.setText("Checkout");
        CheckoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckoutButtonActionPerformed(evt);
            }
        });

        itemsInBasket.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(itemsInBasket);
        if (itemsInBasket.getColumnModel().getColumnCount() > 0) {
            itemsInBasket.getColumnModel().getColumn(0).setHeaderValue(DBControler.getInstance().getLocalizationDB().GetLocalization("ITEM"));
            itemsInBasket.getColumnModel().getColumn(1).setHeaderValue(DBControler.getInstance().getLocalizationDB().GetLocalization("QUANTITY"));
            itemsInBasket.getColumnModel().getColumn(2).setHeaderValue(DBControler.getInstance().getLocalizationDB().GetLocalization("PRICE"));
        }

        totalCost.setText("Total: €0.00");

        UndoButton.setText("Undo");
        UndoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UndoButtonActionPerformed(evt);
            }
        });

        cbCurrency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCurrencyActionPerformed(evt);
            }
        });

        jLabel1.setText("Which currency would you like to pay with?");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(totalCost, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(UndoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CheckoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbCurrency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbCurrency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalCost, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CheckoutButton)
                    .addComponent(UndoButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // checkout
    private void CheckoutButtonActionPerformed(java.awt.event.ActionEvent evt) {                                         

        // Check for if the user has actually bought any items
        if (purchases.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Error - No items in basket!");
            return;
        }
        
        purchases.forEach((p) -> {
            dispatcher.dispatch(new PurchaseRequest(p));
        });        
               if(Shop.getInstance().getAccount().getPaymentType() != null){
            new ReceiptUI().run();
        }
        dispose();
    }                                              

    private void UndoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UndoButtonActionPerformed
        ShopControl.GetInstance().Undo();
        SetData();
    }//GEN-LAST:event_UndoButtonActionPerformed

    private void cbCurrencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCurrencyActionPerformed
        currency = Money.Currency.valueOf(cbCurrency.getSelectedItem().toString());
        SetData();
        
        // Set up currency change interceptor
        if (dispatcher != null) {
            dispatcher.unregisterInterceptor(currencyChangeInterceptor);
            currencyChangeInterceptor = new PurchaseRequestInterceptorChangeCurrency(currency);
            dispatcher.registerInterceptor(currencyChangeInterceptor);
        }
    }//GEN-LAST:event_cbCurrencyActionPerformed

    /* Create and display the form */
    public void run() {
        this.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CheckoutButton;
    private javax.swing.JButton UndoButton;
    private javax.swing.JComboBox<String> cbCurrency;
    private javax.swing.JTable itemsInBasket;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel totalCost;
    // End of variables declaration//GEN-END:variables
}
